# {'ACCOUNT NAME': 'contact.bluvid@gmail.com', 'ACCOUNT PASSWORD': '456@~]!fTy12/jK$', 'DB NAME': 'Bluvid_App_Vidbuy_Companies', 'DB PASSWORD': 'ddx:/2#+fOPasta!;-'}

defs = {
	"A" : "&00;",
	"B" : "&01;",
	"C" : "&02;",
	'D' : "&03;",
	'E' : "&04;",
	'F' : "&05;",
	'G' : "&06;",
	'H' : "&07;",
	'I' : "&08;",
	'J' : "&09;",
	'K' : "&10;",
	'L' : "&11;",
	'M' : "&12;",
	'N' : "&13;",
	'O' : "&14;",
	'P' : "&15;",
	'Q' : "&16;",
	'R' : "&17;",
	'S' : "&18;",
	'T' : "&19;",
	'U' : "&20;",
	'V' : "&21;",
	'W' : "&22;",
	'X' : "&23;",
	'Y' : "&24;",
	'Z' : "&25;",
	"a" : "&001;",
	"b" : "&002;",
	'c' : "&003;",
	'd' : "&004;",
	'e' : "&005;",
	'f' : "&006;",
	'g' : "&007;",
	'h' : "&008;",
	'i' : "&009;",
	'j' : "&010;",
	'k' : "&011;",
	'l' : "&012;",
	'm' : "&013;",
	'n' : "&014;",
	'o' : "&015;",
	'p' : "&016;",
	'q' : "&017;",
	'r' : "&018;",
	's' : "&019;",
	't' : "&020;",
	'u' : "&021;",
	'v' : "&022;",
	'w' : "&023;",
	'x' : "&024;",
	'y' : "&025;",
	'z' : "&026;",
	"{" : "&co;",
	"}" : "&cc;",
	"#" : "&hs;",
	"@" : "&at;",
	"." : "&st;",
	"," : "&cm;",
	"/" : "&fs;",
	"\\": "&bs;",
	"%" : "&pc;",
	"'" : "&sq;",
	'"' : "&dq;",
	"(" : "&bo;",
	")" : "&bc;",
	"[" : "&so;",
	"]" : "&sc;",
	":" : "&fc;",
	";" : "&sm;",
	" " : "&ws;",
	".com" : "&com;",
	"$" : "&dl;",
	"-" : "&hyph;",
	"_" : "&und;",
	"=" : "&equ;",
	"+" : "&plus;",
	"|" : "&orsign;",
	"&" : "&amp;",
	"*" : "&ast;",
	"^" : "&pow;",
	"~" : "&crt;",
	"?" : "%qa;",
	"" : "&nt;",
	"<" : "&gt;",
	">" : "&lt;",
	"\n": "&nl;",
	"\t": "&tbsp;",
	"`": "&bctk;",
	"!": "&ecm;"
}
for n in list(range(10000)):
	defs[f"{n}"] = f"&&{n};"

# print(defs)
def encrypter(string):
	
	re = []
	slist = {}
	for k, v in defs.items():
		for s in string:
			if k == s:
				slist[s] = v
	encoded = []

	for stri in string:
		for s, v in slist.items():
			if s == stri:
				encoded.append(slist[s])
	
	return "".join(encoded)

def decrypter(encoded_str):
	
	en_list = encoded_str.split(";")
	en_list_new = []
	for en_item in en_list:
		en_list_new.append(en_item + ";")

	dc_list = []
	for item in en_list_new:
		for k, v in defs.items():
			if item == v:
				dc_list.append(k)


	decoded_str = "".join(dc_list)

	return decoded_str

def validate_dc(data, dc):
	if data == dc:
		return True
	else:
		return False


# http://127.0.0.1:2781/handler/create-db/&003;&015;&014;&020;&001;&003;&020;&st;&002;&012;&021;&022;&009;&004;&at;&007;&013;&001;&009;&012;&st;&003;&015;&013;/&&4;&&5;&&6;&at;&crt;&sc;&ecm;&006;&19;&025;&&1;&&2;&fs;&010;&10;&dl;/&01;&012;&021;&022;&009;&004;&und;&00;&016;&016;&und;&21;&009;&004;&002;&021;&025;&und;&02;&015;&013;&016;&001;&014;&009;&005;&019;/&004;&004;&024;&fc;&fs;&&2;&hs;&plus;&006;&14;&15;&001;&019;&020;&001;&sm;&hyph;/&20;&18;&04;&17;/&so;&sq;&014;&001;&013;&005;&sq;&cm;&ws;&sq;&021;&019;&005;&018;&014;&001;&013;&005;&sq;&cm;&ws;&sq;&005;&013;&001;&009;&012;&sq;&cm;&ws;&sq;&001;&007;&005;&sq;&cm;&ws;&sq;&019;&020;&001;&020;&005;&und;&015;&006;&und;&015;&018;&009;&007;&009;&014;&sq;&cm;&ws;&sq;&019;&020;&001;&020;&005;&und;&015;&006;&und;&018;&005;&019;&009;&004;&005;&014;&003;&005;&sq;&cm;&ws;&sq;&004;&001;&020;&005;&und;&015;&006;&und;&002;&009;&018;&020;&008;&sq;&cm;&ws;&sq;&003;&015;&021;&014;&020;&018;&025;&sq;&cm;&ws;&sq;&007;&005;&014;&004;&005;&018;&sq;&cm;&ws;&sq;&009;&014;&004;&009;&022;&009;&004;&021;&001;&012;&009;&020;&025;&und;&019;&020;&001;&020;&021;&019;&sq;&sc;

# print(encrypter("""{
# "NAME": "Bluvid_App_Vidbuy_Companies",
# "PASSWORD": "scrypt:32768:8:1$XAGIOVCPzzsB68lU$2607fedc3012932307e7aabc442ac3ad4932eb35f12d17d14927c568bb196ceb5a7844d6d0e555147f31e3036aeb02102ff86d7f6ad3a0186219d130accf40c4",
# "CONTENT": {
# 		"USER": [{'0': {'id': '0', 'name': 'NULL', 'password': 'NULL', 'username': 'NULL', 'email': 'NULL', 'age': 'NULL', 'state_of_origin': 'NULL', 'state_of_residence': 'NULL', 'date_of_birth': 'NULL', 'country': 'NULL', 'gender': 'NULL', 'individuality_status': 'NULL', 'app_theme': 'NULL'}}, ['name', 'username', 'email', 'age', 'state_of_origin', 'state_of_residence', 'date_of_birth', 'country', 'gender', 'individuality_status', 'app_theme']]
# 	}
# }"""))

# print(decrypter("&nl;&co;&nl;&dq;&13;&00;&12;&04;&dq;&fc;&ws;&dq;&01;&012;&021;&022;&009;&004;&und;&00;&016;&016;&und;&21;&009;&004;&002;&021;&025;&und;&02;&015;&013;&016;&001;&014;&009;&005;&019;&dq;&cm;&nl;&dq;&15;&00;&18;&18;&22;&14;&17;&03;&dq;&fc;&ws;&dq;&019;&003;&018;&025;&016;&020;&fc;&&3;&&2;&&7;&&6;&&8;&fc;&&8;&fc;&&1;&dl;&23;&00;&06;&08;&14;&21;&02;&15;&026;&026;&019;&01;&&6;&&8;&012;&20;&dl;&&2;&&6;&&0;&&7;&006;&005;&004;&003;&&3;&&0;&&1;&&2;&&9;&&3;&&2;&&3;&&0;&&7;&005;&&7;&001;&001;&002;&003;&&4;&&4;&&2;&001;&003;&&3;&001;&004;&&4;&&9;&&3;&&2;&005;&002;&&3;&&5;&006;&&1;&&2;&004;&&1;&&7;&004;&&1;&&4;&&9;&&2;&&7;&003;&&5;&&6;&&8;&002;&002;&&1;&&9;&&6;&003;&005;&002;&&5;&001;&&7;&&8;&&4;&&4;&004;&&6;&004;&&0;&005;&&5;&&5;&&5;&&1;&&4;&&7;&006;&&3;&&1;&005;&&3;&&0;&&3;&&6;&001;&005;&002;&&0;&&2;&&1;&&0;&&2;&006;&006;&&8;&&6;&004;&&7;&006;&&6;&001;&004;&&3;&001;&&0;&&1;&&8;&&6;&&2;&&1;&&9;&004;&&1;&&3;&&0;&001;&003;&003;&006;&&4;&&0;&003;&&4;&dq;&cm;&nl;&dq;&02;&14;&13;&19;&04;&13;&19;&dq;&fc;&ws;&co;&nl;&tbsp;&tbsp;&dq;&20;&18;&04;&17;&dq;&fc;&ws;&so;&co;&sq;&&0;&sq;&fc;&ws;&co;&sq;&009;&004;&sq;&fc;&ws;&sq;&&0;&sq;&cm;&ws;&sq;&014;&001;&013;&005;&sq;&fc;&ws;&sq;&13;&20;&11;&11;&sq;&cm;&ws;&sq;&021;&019;&005;&018;&014;&001;&013;&005;&sq;&fc;&ws;&sq;&13;&20;&11;&11;&sq;&cm;&ws;&sq;&005;&013;&001;&009;&012;&sq;&fc;&ws;&sq;&13;&20;&11;&11;&sq;&cm;&ws;&sq;&001;&007;&005;&sq;&fc;&ws;&sq;&13;&20;&11;&11;&sq;&cm;&ws;&sq;&019;&020;&001;&020;&005;&und;&015;&006;&und;&015;&018;&009;&007;&009;&014;&sq;&fc;&ws;&sq;&13;&20;&11;&11;&sq;&cm;&ws;&sq;&019;&020;&001;&020;&005;&und;&015;&006;&und;&018;&005;&019;&009;&004;&005;&014;&003;&005;&sq;&fc;&ws;&sq;&13;&20;&11;&11;&sq;&cm;&ws;&sq;&004;&001;&020;&005;&und;&015;&006;&und;&002;&009;&018;&020;&008;&sq;&fc;&ws;&sq;&13;&20;&11;&11;&sq;&cm;&ws;&sq;&003;&015;&021;&014;&020;&018;&025;&sq;&fc;&ws;&sq;&13;&20;&11;&11;&sq;&cm;&ws;&sq;&007;&005;&014;&004;&005;&018;&sq;&fc;&ws;&sq;&13;&20;&11;&11;&sq;&cm;&ws;&sq;&009;&014;&004;&009;&022;&009;&004;&021;&001;&012;&009;&020;&025;&und;&019;&020;&001;&020;&021;&019;&sq;&fc;&ws;&sq;&13;&20;&11;&11;&sq;&cc;&cc;&cm;&ws;&so;&sq;&014;&001;&013;&005;&sq;&cm;&ws;&sq;&021;&019;&005;&018;&014;&001;&013;&005;&sq;&cm;&ws;&sq;&005;&013;&001;&009;&012;&sq;&cm;&ws;&sq;&001;&007;&005;&sq;&cm;&ws;&sq;&019;&020;&001;&020;&005;&und;&015;&006;&und;&015;&018;&009;&007;&009;&014;&sq;&cm;&ws;&sq;&019;&020;&001;&020;&005;&und;&015;&006;&und;&018;&005;&019;&009;&004;&005;&014;&003;&005;&sq;&cm;&ws;&sq;&004;&001;&020;&005;&und;&015;&006;&und;&002;&009;&018;&020;&008;&sq;&cm;&ws;&sq;&003;&015;&021;&014;&020;&018;&025;&sq;&cm;&ws;&sq;&007;&005;&014;&004;&005;&018;&sq;&cm;&ws;&sq;&009;&014;&004;&009;&022;&009;&004;&021;&001;&012;&009;&020;&025;&und;&019;&020;&001;&020;&021;&019;&sq;&sc;&sc;&nl;&tbsp;&cc;&nl;&cc;&nl;"))